traits$sp_ind <- 1:nrow(traits)
Cind <- as.data.frame.matrix(table(traits$comm, traits$sp_ind))
colnames(Cind) <- 1:nrow(traits)
rownames(traits) <- 1:nrow(traits)
# Dendrogram-based FD
#dendroFD[, j] <- FD_dendro(S = traits[, c("trait1", "trait2")], A = Cind, w = NA, Distance.method = "gower", ord = "podani", Cluster.method = "average", stand.x = TRUE, Weigthedby = "abundance")$FDpg
# TPDs and TPDc
#TPDs_spp <- TPDs(species = traits$sp, traits = traits[, c("trait1", "trait2")], samples = traits$comm)
#TPDc_comm <- TPDc(TPDs = TPDs_spp, sampUnit = C)
#plotTPD(TPDs_spp, nRowCol = c(5,2))
#plotTPD(TPDc_comm, nRowCol = c(5,2))
# TPD_FD
#TPD_FD <- REND(TPDc = TPDc_comm)
#TPD_FRic[, j] <- TPD_FD$communities$FRichness
#TPD_FEve[, j] <- TPD_FD$communities$FEvenness
#TPD_FDiv[, j] <- TPD_FD$communities$FDivergence
# Hypervolumes
#hvlist <- kernel.build(comm = Cind, trait = traits[, c("trait1", "trait2")], axes = 0, distance = "euclidean", method = "gaussian", abund = FALSE, samples.per.point = 5)
# Compute functional diversity metrics
#hv_richness[, j] <- kernel.alpha(hvlist)
#hv_regularity[, j] <- kernel.evenness(hvlist)
#hv_divergence[, j] <- kernel.dispersion(hvlist, func = "divergence")
}
traits <- na.omit(data.frame(trait1 = trait1a_matrix[, j], trait2 = trait2a_matrix[, j], comm, sp))
traits <- na.omit(data.frame(trait1 = trait1a_matrix[, 2], trait2 = trait2a_matrix[, 2], comm, sp))
head(traits)
subcom <- subset(traits, comm == comm_names[5])
subtrait_matrix <- as.data.frame(scale(subcom[, c("trait1", "trait2")]))
TOP.index(subcom[, c("trait1", "trait2")])[2]
TED.index(subcom[, c("trait1", "trait2")])
subcom[, c("trait1", "trait2")]
for(j in 1:5){
for(i in 1:ncomms){
traits <- na.omit(data.frame(trait1 = trait1a_matrix[, j], trait2 = trait2a_matrix[, j], comm, sp))
subcom <- subset(traits, comm == comm_names[i])
subtrait_matrix <- as.data.frame(scale(subcom[, c("trait1", "trait2")]))
TOP_comms[i, j] <- TOP.index(subcom[, c("trait1", "trait2")])[2]
#TED_comms[i, j] <- TED.index(subcom[, c("trait1", "trait2")])
MVNH_det_comms[i, j] <- det(cov(subcom[, c("trait1", "trait2")]))
}
# Community by species matrix
C <- as.matrix(table(traits$comm, traits$sp))
# Community by individual matrix
traits$sp_ind <- 1:nrow(traits)
Cind <- as.data.frame.matrix(table(traits$comm, traits$sp_ind))
colnames(Cind) <- 1:nrow(traits)
rownames(traits) <- 1:nrow(traits)
# Dendrogram-based FD
dendroFD[, j] <- FD_dendro(S = traits[, c("trait1", "trait2")], A = Cind, w = NA, Distance.method = "gower", ord = "podani", Cluster.method = "average", stand.x = TRUE, Weigthedby = "abundance")$FDpg
# TPDs and TPDc
TPDs_spp <- TPDs(species = traits$sp, traits = traits[, c("trait1", "trait2")], samples = traits$comm)
TPDc_comm <- TPDc(TPDs = TPDs_spp, sampUnit = C)
#plotTPD(TPDs_spp, nRowCol = c(5,2))
#plotTPD(TPDc_comm, nRowCol = c(5,2))
# TPD_FD
TPD_FD <- REND(TPDc = TPDc_comm)
TPD_FRic[, j] <- TPD_FD$communities$FRichness
TPD_FEve[, j] <- TPD_FD$communities$FEvenness
TPD_FDiv[, j] <- TPD_FD$communities$FDivergence
# Hypervolumes
hvlist <- kernel.build(comm = Cind, trait = traits[, c("trait1", "trait2")], axes = 0, distance = "euclidean", method = "gaussian", abund = FALSE, samples.per.point = 5)
# Compute functional diversity metrics
hv_richness[, j] <- kernel.alpha(hvlist)
hv_regularity[, j] <- kernel.evenness(hvlist)
hv_divergence[, j] <- kernel.dispersion(hvlist, func = "divergence")
}
for(j in 1:5){
for(i in 1:ncomms){
traits <- na.omit(data.frame(trait1 = trait1a_matrix[, j], trait2 = trait2a_matrix[, j], comm, sp))
subcom <- subset(traits, comm == comm_names[i])
subtrait_matrix <- as.data.frame(scale(subcom[, c("trait1", "trait2")]))
TOP_comms[i, j] <- TOP.index(subcom[, c("trait1", "trait2")])[2]
#TED_comms[i, j] <- TED.index(subcom[, c("trait1", "trait2")])
MVNH_det_comms[i, j] <- det(cov(subcom[, c("trait1", "trait2")]))
}
# Community by species matrix
C <- as.matrix(table(traits$comm, traits$sp))
# Community by individual matrix
traits$sp_ind <- 1:nrow(traits)
Cind <- as.data.frame.matrix(table(traits$comm, traits$sp_ind))
colnames(Cind) <- 1:nrow(traits)
rownames(traits) <- 1:nrow(traits)
# Dendrogram-based FD
dendroFD[, j] <- FD_dendro(S = traits[, c("trait1", "trait2")], A = Cind, w = NA, Distance.method = "gower", ord = "podani", Cluster.method = "average", stand.x = TRUE, Weigthedby = "abundance")$FDpg
# TPDs and TPDc
TPDs_spp <- TPDs(species = traits$sp, traits = traits[, c("trait1", "trait2")], samples = traits$comm)
TPDc_comm <- TPDc(TPDs = TPDs_spp, sampUnit = C)
#plotTPD(TPDs_spp, nRowCol = c(5,2))
#plotTPD(TPDc_comm, nRowCol = c(5,2))
# TPD_FD
TPD_FD <- REND(TPDc = TPDc_comm)
TPD_FRic[, j] <- TPD_FD$communities$FRichness
TPD_FEve[, j] <- TPD_FD$communities$FEvenness
TPD_FDiv[, j] <- TPD_FD$communities$FDivergence
# Hypervolumes
hvlist <- kernel.build(comm = Cind, trait = traits[, c("trait1", "trait2")], axes = 0, distance = "euclidean", method = "gaussian", abund = FALSE, samples.per.point = 5)
# Compute functional diversity metrics
hv_richness[, j] <- kernel.alpha(hvlist)
hv_regularity[, j] <- kernel.evenness(hvlist)
hv_divergence[, j] <- kernel.dispersion(hvlist, func = "divergence")
}
head(subcom)
head(subcom[, c("trait1", "trait2")])
x<-subcom[, c("trait1", "trait2")]
TOP.index(x)
TED.index(x)
TED.index <- function(traitdat){
# Find the best REFERENCE (minimum number of individuals >= individuals in the sample)
n.sample<-nrow(traitdat)
diff1<-matrix(ncol=2,nrow=length(ref.matrix)/2)
diff1[,1] <- ref.matrix[,1]
diff1[,2] <- ref.matrix[,2]-n.sample
min.diff1<-min(diff1[,2][diff1[,2]>=0])
select.i<-diff1[diff1[,2]==min.diff1,][1]
traits.ref <- sphere.solid.grid(p=dim1, n=select.i)
# Transform REFERENCE in data frame
traits.ref <- as.vector(traits.ref$points)
ind<-length(traits.ref)/dim1
reference<-matrix(ncol=dim1,nrow=ind)
for (j in 1:dim1){
reference[,j] <- traits.ref[((j-1)*ind+1):(j*ind)]
}
traits.ref <- as.data.frame(reference)
# Ev. delete individuals in order to have the same number as in the sample
x <- nrow(traits.ref)-nrow(traitdat)
if (x!=0){
# coordinates of the center of gravity of the vertices (Gv)
baryv<-apply(traits.ref,2,mean)
# euclidian dstances to Gv (dB)
distbaryv<-rep(0,nrow(traits.ref))
for (j in 1:nrow(traits.ref))
distbaryv[j]<-( sum((traits.ref[j,]-baryv)^2) )^0.5
merge1<-data.frame(traits.ref,distbaryv)
#sort by distbaryv (descending)
sort1 <- merge1[order(-distbaryv),]
traits.ref<-sort1[-1:-x,-(ncol(sort1))]
}
# Compare with sample
Distance.method <- "euclidean"
D1 <- dist(traitdat, method=Distance.method)
density.D <- density(D1)$y
rm(D1)
D.ref <- dist(traits.ref, method=Distance.method)
density.D.ref <- density(D.ref)$y
rm(D.ref)
results <- KLdiv(cbind(density.D, density.D.ref))
value <- results[1,2]
TED <- 1-log10(value+1)
TED
}
TED.index(x)
nrow(subcom)
max1 <- 100
dim1 <- 2
ref.matrix<-matrix(ncol=2,nrow=max1)
if (dim1 == 1) {
i=0.9 } else { i=1.9 }
n <- 0
rows1<-0
while(rows1<max1){
i=i+0.1
n=n+1
traits.ref <- sphere.solid.grid(p=dim1, n=i)
rows1<-nrow(traits.ref$points)
ref.matrix[n,1]<-i
ref.matrix[n,2]<-rows1
}
k <- i+1
while(i<k){
i=i+0.1
n=n+1
traits.ref <- sphere.solid.grid(p=dim1, n=i)
rows1<-nrow(traits.ref$points)
ref.matrix[n,1]<-i
ref.matrix[n,2]<-rows1
}
head(traits)
nrow(traits)
#### Function to compute TED index (from Fontana et al. 2015)
# List of possible REFERENCES
# Define maximum number of points (max1) and number of traits (dim1)
max1 <- 1000
dim1 <- 2
ref.matrix<-matrix(ncol=2,nrow=max1)
if (dim1 == 1) {
i=0.9 } else { i=1.9 }
n <- 0
rows1<-0
while(rows1<max1){
i=i+0.1
n=n+1
traits.ref <- sphere.solid.grid(p=dim1, n=i)
rows1<-nrow(traits.ref$points)
ref.matrix[n,1]<-i
ref.matrix[n,2]<-rows1
}
k <- i+1
while(i<k){
i=i+0.1
n=n+1
traits.ref <- sphere.solid.grid(p=dim1, n=i)
rows1<-nrow(traits.ref$points)
ref.matrix[n,1]<-i
ref.matrix[n,2]<-rows1
}
ref.matrix<-na.omit(ref.matrix)
TED.index(x)
ncol(trait1_matrix)
trait1a_matrix <- trait1_matrix[, one_every_10_column == 1]
trait2a_matrix <- trait2_matrix[, one_every_10_column == 1]
ncol(trait1a_matrix)
# Compute FD metrics
dendroFD <- TOP_comms <- TED_comms <- MVNH_det_comms <- TPD_FRic <- TPD_FEve <- TPD_FDiv <- hv_richness <- hv_regularity <- hv_divergence <- matrix(NA, nrow = ncomms, ncol = ncol(trait1a_matrix))
Ck <- NULL
comm_names <- unique(comm)
for(j in 1:ncol(trait1_matrix)){
for(i in 1:ncomms){
traits <- na.omit(data.frame(trait1 = trait1a_matrix[, j], trait2 = trait2a_matrix[, j], comm, sp))
subcom <- subset(traits, comm == comm_names[i])
subtrait_matrix <- as.data.frame(scale(subcom[, c("trait1", "trait2")]))
TOP_comms[i, j] <- TOP.index(subcom[, c("trait1", "trait2")])[2]
#TED_comms[i, j] <- TED.index(subcom[, c("trait1", "trait2")])
MVNH_det_comms[i, j] <- det(cov(subcom[, c("trait1", "trait2")]))
}
# Community by species matrix
C <- as.matrix(table(traits$comm, traits$sp))
# Community by individual matrix
traits$sp_ind <- 1:nrow(traits)
Cind <- as.data.frame.matrix(table(traits$comm, traits$sp_ind))
colnames(Cind) <- 1:nrow(traits)
rownames(traits) <- 1:nrow(traits)
# Dendrogram-based FD
dendroFD[, j] <- FD_dendro(S = traits[, c("trait1", "trait2")], A = Cind, w = NA, Distance.method = "gower", ord = "podani", Cluster.method = "average", stand.x = TRUE, Weigthedby = "abundance")$FDpg
# TPDs and TPDc
TPDs_spp <- TPDs(species = traits$sp, traits = traits[, c("trait1", "trait2")], samples = traits$comm)
TPDc_comm <- TPDc(TPDs = TPDs_spp, sampUnit = C)
#plotTPD(TPDs_spp, nRowCol = c(5,2))
#plotTPD(TPDc_comm, nRowCol = c(5,2))
# TPD_FD
TPD_FD <- REND(TPDc = TPDc_comm)
TPD_FRic[, j] <- TPD_FD$communities$FRichness
TPD_FEve[, j] <- TPD_FD$communities$FEvenness
TPD_FDiv[, j] <- TPD_FD$communities$FDivergence
# Hypervolumes
hvlist <- kernel.build(comm = Cind, trait = traits[, c("trait1", "trait2")], axes = 0, distance = "euclidean", method = "gaussian", abund = FALSE, samples.per.point = 5)
# Compute functional diversity metrics
hv_richness[, j] <- kernel.alpha(hvlist)
hv_regularity[, j] <- kernel.evenness(hvlist)
hv_divergence[, j] <- kernel.dispersion(hvlist, func = "divergence")
}
FD_itv <- data.frame(dendroFD = as.vector(dendroFD), TOP = as.vector(TOP_comms), TED = as.vector(TED_comms),
MVNHdet = as.vector(MVNH_det_comms),
TPD_FRich = as.vector(TPD_FRic),
TPD_FEve = as.vector(TPD_FEve),
TPD_FDiv = as.vector(TPD_FDiv),
HV_Rich = as.vector(hv_richness),
HV_Reg = as.vector(hv_regularity),
HV_Dev = as.vector(hv_divergence),
n_sim = sort(rep(1:100, nsim)), range_trait1 = rep(range_trait1_sim, each = nsim), CVcomm = rep(CVcomm_sim, each = nsim), CVintrasp = rep(CVintrasp_sim, each = nsim))
min_trait1_comm
max_trait1_comm
max_trait1_comm-min_trait1_comm
CVcomm_sim
strings_split <- strsplit(names(trait1_matrix),"_")
range_trait1_sim <- c()
CVcomm_sim <- c()
CVintrasp_sim <- c()
for(i in 1:length(strings_split)){
range_trait1_sim[i] <- as.numeric(strings_split[[i]][4]) - as.numeric(strings_split[[i]][2])
CVcomm_sim[i] <- as.numeric(substr(strings_split[[i]][6], 1, 3))
CVintrasp_sim[i] <- as.numeric(strings_split[[i]][7])
}
FD_itv <- data.frame(dendroFD = as.vector(dendroFD), TOP = as.vector(TOP_comms), TED = as.vector(TED_comms),
MVNHdet = as.vector(MVNH_det_comms),
TPD_FRich = as.vector(TPD_FRic),
TPD_FEve = as.vector(TPD_FEve),
TPD_FDiv = as.vector(TPD_FDiv),
HV_Rich = as.vector(hv_richness),
HV_Reg = as.vector(hv_regularity),
HV_Dev = as.vector(hv_divergence),
n_sim = sort(rep(1:100, nsim)),
range_trait1 = rep(range_trait1_sim, each = nsim),
CVcomm = rep(CVcomm_sim, each = nsim),
CVintrasp = rep(CVintrasp_sim, each = nsim))
head(FD_itv)
head(subcom)
nrow(subcom)
max1 <- 100
dim1 <- 2
ref.matrix<-matrix(ncol=2,nrow=max1)
if (dim1 == 1) {
i=0.9 } else { i=1.9 }
n <- 0
rows1<-0
while(rows1<max1){
i=i+0.1
n=n+1
traits.ref <- sphere.solid.grid(p=dim1, n=i)
rows1<-nrow(traits.ref$points)
ref.matrix[n,1]<-i
ref.matrix[n,2]<-rows1
}
k <- i+1
while(i<k){
i=i+0.1
n=n+1
traits.ref <- sphere.solid.grid(p=dim1, n=i)
rows1<-nrow(traits.ref$points)
ref.matrix[n,1]<-i
ref.matrix[n,2]<-rows1
}
max1 <- 200
dim1 <- 2
ref.matrix<-matrix(ncol=2,nrow=max1)
if (dim1 == 1) {
i=0.9 } else { i=1.9 }
n <- 0
rows1<-0
while(rows1<max1){
i=i+0.1
n=n+1
traits.ref <- sphere.solid.grid(p=dim1, n=i)
rows1<-nrow(traits.ref$points)
ref.matrix[n,1]<-i
ref.matrix[n,2]<-rows1
}
k <- i+1
while(i<k){
i=i+0.1
n=n+1
traits.ref <- sphere.solid.grid(p=dim1, n=i)
rows1<-nrow(traits.ref$points)
ref.matrix[n,1]<-i
ref.matrix[n,2]<-rows1
}
ref.matrix<-na.omit(ref.matrix)
# TED index calculation
TED.index <- function(traitdat){
# Find the best REFERENCE (minimum number of individuals >= individuals in the sample)
n.sample<-nrow(traitdat)
diff1<-matrix(ncol=2,nrow=length(ref.matrix)/2)
diff1[,1] <- ref.matrix[,1]
diff1[,2] <- ref.matrix[,2]-n.sample
min.diff1<-min(diff1[,2][diff1[,2]>=0])
select.i<-diff1[diff1[,2]==min.diff1,][1]
traits.ref <- sphere.solid.grid(p=dim1, n=select.i)
# Transform REFERENCE in data frame
traits.ref <- as.vector(traits.ref$points)
ind<-length(traits.ref)/dim1
reference<-matrix(ncol=dim1,nrow=ind)
for (j in 1:dim1){
reference[,j] <- traits.ref[((j-1)*ind+1):(j*ind)]
}
traits.ref <- as.data.frame(reference)
# Ev. delete individuals in order to have the same number as in the sample
x <- nrow(traits.ref)-nrow(traitdat)
if (x!=0){
# coordinates of the center of gravity of the vertices (Gv)
baryv<-apply(traits.ref,2,mean)
# euclidian dstances to Gv (dB)
distbaryv<-rep(0,nrow(traits.ref))
for (j in 1:nrow(traits.ref))
distbaryv[j]<-( sum((traits.ref[j,]-baryv)^2) )^0.5
merge1<-data.frame(traits.ref,distbaryv)
#sort by distbaryv (descending)
sort1 <- merge1[order(-distbaryv),]
traits.ref<-sort1[-1:-x,-(ncol(sort1))]
}
# Compare with sample
Distance.method <- "euclidean"
D1 <- dist(traitdat, method=Distance.method)
density.D <- density(D1)$y
rm(D1)
D.ref <- dist(traits.ref, method=Distance.method)
density.D.ref <- density(D.ref)$y
rm(D.ref)
results <- KLdiv(cbind(density.D, density.D.ref))
value <- results[1,2]
TED <- 1-log10(value+1)
TED
}
for(j in 1:ncol(trait1_matrix)){
for(i in 1:ncomms){
traits <- na.omit(data.frame(trait1 = trait1a_matrix[, j], trait2 = trait2a_matrix[, j], comm, sp))
subcom <- subset(traits, comm == comm_names[i])
subtrait_matrix <- as.data.frame(scale(subcom[, c("trait1", "trait2")]))
#TOP_comms[i, j] <- TOP.index(subcom[, c("trait1", "trait2")])[2]
TED_comms[i, j] <- TED.index(subcom[, c("trait1", "trait2")])
#MVNH_det_comms[i, j] <- det(cov(subcom[, c("trait1", "trait2")]))
}
# Community by species matrix
# C <- as.matrix(table(traits$comm, traits$sp))
# Community by individual matrix
# traits$sp_ind <- 1:nrow(traits)
# Cind <- as.data.frame.matrix(table(traits$comm, traits$sp_ind))
# colnames(Cind) <- 1:nrow(traits)
# rownames(traits) <- 1:nrow(traits)
# Dendrogram-based FD
#dendroFD[, j] <- FD_dendro(S = traits[, c("trait1", "trait2")], A = Cind, w = NA, Distance.method = "gower", ord = "podani", Cluster.method = "average", stand.x = TRUE, Weigthedby = "abundance")$FDpg
# TPDs and TPDc
# TPDs_spp <- TPDs(species = traits$sp, traits = traits[, c("trait1", "trait2")], samples = traits$comm)
# TPDc_comm <- TPDc(TPDs = TPDs_spp, sampUnit = C)
#plotTPD(TPDs_spp, nRowCol = c(5,2))
#plotTPD(TPDc_comm, nRowCol = c(5,2))
# TPD_FD
# TPD_FD <- REND(TPDc = TPDc_comm)
# TPD_FRic[, j] <- TPD_FD$communities$FRichness
#TPD_FEve[, j] <- TPD_FD$communities$FEvenness
# TPD_FDiv[, j] <- TPD_FD$communities$FDivergence
# Hypervolumes
# hvlist <- kernel.build(comm = Cind, trait = traits[, c("trait1", "trait2")], axes = 0, distance = "euclidean", method = "gaussian", abund = FALSE, samples.per.point = 5)
# Compute functional diversity metrics
#hv_richness[, j] <- kernel.alpha(hvlist)
# hv_regularity[, j] <- kernel.evenness(hvlist)
# hv_divergence[, j] <- kernel.dispersion(hvlist, func = "divergence")
}
ncol(trait1_matrix)
ncol(trait1a_matrix)
for(j in 1:ncol(trait1a_matrix)){
for(i in 1:ncomms){
traits <- na.omit(data.frame(trait1 = trait1a_matrix[, j], trait2 = trait2a_matrix[, j], comm, sp))
subcom <- subset(traits, comm == comm_names[i])
subtrait_matrix <- as.data.frame(scale(subcom[, c("trait1", "trait2")]))
#TOP_comms[i, j] <- TOP.index(subcom[, c("trait1", "trait2")])[2]
TED_comms[i, j] <- TED.index(subcom[, c("trait1", "trait2")])
#MVNH_det_comms[i, j] <- det(cov(subcom[, c("trait1", "trait2")]))
}
# Community by species matrix
# C <- as.matrix(table(traits$comm, traits$sp))
# Community by individual matrix
# traits$sp_ind <- 1:nrow(traits)
# Cind <- as.data.frame.matrix(table(traits$comm, traits$sp_ind))
# colnames(Cind) <- 1:nrow(traits)
# rownames(traits) <- 1:nrow(traits)
# Dendrogram-based FD
#dendroFD[, j] <- FD_dendro(S = traits[, c("trait1", "trait2")], A = Cind, w = NA, Distance.method = "gower", ord = "podani", Cluster.method = "average", stand.x = TRUE, Weigthedby = "abundance")$FDpg
# TPDs and TPDc
# TPDs_spp <- TPDs(species = traits$sp, traits = traits[, c("trait1", "trait2")], samples = traits$comm)
# TPDc_comm <- TPDc(TPDs = TPDs_spp, sampUnit = C)
#plotTPD(TPDs_spp, nRowCol = c(5,2))
#plotTPD(TPDc_comm, nRowCol = c(5,2))
# TPD_FD
# TPD_FD <- REND(TPDc = TPDc_comm)
# TPD_FRic[, j] <- TPD_FD$communities$FRichness
#TPD_FEve[, j] <- TPD_FD$communities$FEvenness
# TPD_FDiv[, j] <- TPD_FD$communities$FDivergence
# Hypervolumes
# hvlist <- kernel.build(comm = Cind, trait = traits[, c("trait1", "trait2")], axes = 0, distance = "euclidean", method = "gaussian", abund = FALSE, samples.per.point = 5)
# Compute functional diversity metrics
#hv_richness[, j] <- kernel.alpha(hvlist)
# hv_regularity[, j] <- kernel.evenness(hvlist)
# hv_divergence[, j] <- kernel.dispersion(hvlist, func = "divergence")
}
FD_itv <- data.frame(dendroFD = as.vector(dendroFD), TOP = as.vector(TOP_comms), TED = as.vector(TED_comms),
MVNHdet = as.vector(MVNH_det_comms),
TPD_FRich = as.vector(TPD_FRic),
TPD_FEve = as.vector(TPD_FEve),
TPD_FDiv = as.vector(TPD_FDiv),
HV_Rich = as.vector(hv_richness),
HV_Reg = as.vector(hv_regularity),
HV_Dev = as.vector(hv_divergence),
n_sim = sort(rep(1:100, nsim)),
range_trait1 = rep(range_trait1_sim, each = nsim),
CVcomm = rep(CVcomm_sim, each = nsim),
CVintrasp = rep(CVintrasp_sim, each = nsim))
# Metrics correlations
ggpairs(FD_itv[, 1:10], upper = list(continuous = wrap("cor", method = "spearman"))) +
ggplot2::theme(axis.text.x = element_text(size = 5), axis.text.y = element_text(size = 5))
library(GGally) # Plotting
# Metrics correlations
ggpairs(FD_itv[, 1:10], upper = list(continuous = wrap("cor", method = "spearman"))) +
ggplot2::theme(axis.text.x = element_text(size = 5), axis.text.y = element_text(size = 5))
head(FD_itv)
# Metrics correlations
ggpairs(FD_itv[, 1:10], upper = list(continuous = wrap("cor", method = "spearman"))) +
ggplot2::theme(axis.text.x = element_text(size = 5), axis.text.y = element_text(size = 5))
# Metrics correlations
ggpairs(FD_itv[, 1:10], upper = list(continuous = wrap("cor", method = "spearman"))) +
ggplot2::theme(axis.text.x = element_text(size = 5), axis.text.y = element_text(size = 5))
warnings()
# Metrics correlations
ggpairs(FD_itv[, 1:10], upper = list(continuous = wrap("cor", method = "spearman"))) +
p <- ggplot2::theme(axis.text.x = element_text(size = 5), axis.text.y = element_text(size = 5))
# Metrics correlations
p <- ggpairs(FD_itv[, 1:10], upper = list(continuous = wrap("cor", method = "spearman"))) +
ggplot2::theme(axis.text.x = element_text(size = 5), axis.text.y = element_text(size = 5))
p
vars <- c(1:10, 1:10)
vals <- unique(vars)
every_comb <- t(combn(vals, 2)) # every possible combination of variables
FD_itv$n_sim <- as.factor(FD_itv$n_sim)
z.coeff <- c()
ci <- matrix(NA, nrow = length(every_comb), ncol = 2)
predictor <- c()
response <- c()
for(i in 1:nrow(every_comb)){
p <- scale(FD_itv[, every_comb[i, 1]])
r <- scale(FD_itv[, every_comb[i, 2]])
df <- data.frame(r, p, FD_itv$n_sim)
model <- lmer(r ~ p + (1|n_sim), data = FD_itv)
z.coeff[i] <- summary(model)$coeff[2,1]
ci[i,] <- confint(model)[4,]
predictor[i] <- colnames(FD_itv)[every_comb[i, 1]]
response[i] <- colnames(FD_itv)[every_comb[i, 2]]
}
coeff_df <- data.frame(predictor, response, z.coeff, ci)
head(coeff_df)
getwd()
write.csv(FD_itv, "FD_itv_sims.csv")
write.csv(coeff_df, "FD_itv_sims_mixed_models.csv")
a<-lmer(dendroFD ~ TOP + (1|n_sim), data = FD_itv)
summary(a)
